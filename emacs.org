#+title Emacs config file
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes

* Custom variables and functions
** Variables

#+begin_src emacs-lisp

(defvar rk/default-font-size 120)

(defvar rk/usq_api_path "/home/dev/Projects/usq/usq_api")

#+end_src

** Functions

#+begin_src emacs-lisp

(defun rk/org-font-setup ()
  ;; Replace list hyphen with dot in org mode
  (font-lock-add-keywords 'org-mode
			  '(("^ *\\([-]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))))

(defun rk/org-mode-setup ()
  ;; Fix org mode indentation and line wrapping
  (org-indent-mode)
  (visual-line-mode 1))

(defun rk/org-babel-tangle-config ()
  ;; Automatically generate init file on save
  (when (string-equal (buffer-file-name)
		      (expand-file-name "~/Projects/emacs-config/emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

#+end_src

* Package sources
** Package archives

#+begin_src emacs-lisp

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

#+end_src
   
** Activate use-package

#+begin_src emacs-lisp

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+end_src

* Basic UI configuration
** Main buffer look

#+begin_src emacs-lisp

  (prefer-coding-system 'utf-8)
  (setq inhibit-startup-message t)                ; Disable startup message
  (setq split-width-threshold 1)                  ; Split windows horizontally by default
  (add-hook 'window-setup-hook 'toggle-frame-maximized t) ; Start maximized
  (scroll-bar-mode -1)                            ; Disable visible scrollbar
  (tool-bar-mode -1)                              ; Disable toolbar
  (tooltip-mode -1)                               ; Disable tooltips
  (set-fringe-mode 10)                            ; Margins along the sides
  (menu-bar-mode -1)                              ; Remove menu bar
  (set-face-attribute 'default nil :height rk/default-font-size)   ; Font size
  (column-number-mode)                            ; Enable column numbers
  (global-display-line-numbers-mode t)            ; Enable line numbers
  (dolist (mode '(eshell-mode-hook                ; Disable line nums for
                  org-mode-hook                       ; some modes
                  shell-mode-hook
                  term-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Mode line

#+begin_src emacs-lisp

(use-package all-the-icons)                     ; Icons for doom mode line

(use-package doom-modeline                      ; Enable doom mode line
  :ensure t
  :init (doom-modeline-mode 1))

(use-package doom-themes                        ; Get more themes
  :config
  (load-theme 'doom-nord t))

#+end_src

* Mini-buffer completion
** Ivy and counsel for alternative completion

#+begin_src emacs-lisp

;; Setup ivy (mini-buffer completion)
(use-package ivy
  :diminish
  :bind(("C-s" . swiper)
	:map ivy-minibuffer-map
	("TAB" . ivy-alt-done)
	("C-l" . ivy-alt-done)
	("C-n" . ivy-next-line)
	("C-p" . ivy-previous-line)
	:map ivy-switch-buffer-map
	("C-n" . ivy-next-line)
	("C-l" . ivy-done)
	("C-d" . ivy-switch-buffer-kill)
	:map ivy-reverse-i-search-map
	("C-p" . ivy-previous-line)
	("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

;; Completions for key bindings
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 2))

;; Counsel required for ivy-rich. Also some basic setup
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-ibuffer)
	 ("C-x C-f" . counsel-find-file)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history)))

;; Descriptions of key bindings with M-x
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

#+end_src

** More verbose help

#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* Development
** Angular modes

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)

  (use-package js2-mode
    :mode "\\.js\\'"
    :hook
    ((js2-mode . lsp-deferred)
     (js2-mode . electric-pair-mode))
    :config
    (setq electric-indent-inhibit t)
    (setq js-indent-level 2))

  (use-package json-mode
    :config
    (setq js-indent-level 2))

  (use-package ng2-mode
    :mode
    (("\\.html\\'" . ng2-html-mode)
     ("\\.ts\\'" . ng2-ts-mode))
    :hook
    ((ng2-html-mode . lsp-deferred)
     (ng2-html-mode . electric-pair-mode)
     (ng2-ts-mode . lsp-deferred)
     (ng2-ts-mode . electric-pair-mode))
    :custom
    (typescript-indent-level 2))

  (use-package markdown-mode
    :hook
    (markdown-mode . visual-line-mode))

  (add-hook 'sql-mode-hook
            (setq indent-tabs-mode t)
            (setq tab-width 5))
#+end_src

** Python config

#+begin_src emacs-lisp
  (use-package py-autopep8
    :hook (python-mode . py-autopep8-mode))

  (use-package python-mode
    :hook ((python-mode . company-mode)
           (python-mode . electric-pair-mode)
           (python-mode . flymake-mode)))
#+end_src

** R/Stats config

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :hook (ess-r-mode . flycheck-mode)
    )

  (use-package ess
    :mode "\\.r\\i'"
    :hook ((ess-r-mode . company-mode)
		    (ess-r-mode . electric-pair-mode))
    :config
    (setq ess-R-font-lock-keywords
		   '((ess-R-fl-keyword:keywords . t)
		  (ess-R-fl-keyword:constants . t)
		  (ess-R-fl-keyword:modifiers . t)
		  (ess-R-fl-keyword:fun-defs . t)
		  (ess-R-fl-keyword:assign-ops . t)
		  (ess-R-fl-keyword:%op% . t)
		  (ess-fl-keyword:fun-calls . t)
		  (ess-fl-keyword:numbers . t)
		  (ess-fl-keyword:operators)
		  (ess-fl-keyword:delimiters)
		  (ess-fl-keyword:=)
		  (ess-R-fl-keyword:F&T . t)))
    (setq ess-use-flymake nil)
    (setq ess-use-company 'script-only)
    (setq display-buffer-alist
		   '(("*R Dired"
		   (display-buffer-reuse-window display-buffer-at-bottom)
		   (window-width . 0.5)
		   (window-height . 0.25)
		   (reusable-frames . nil))
		  ("*R"
		   (display-buffer-reuse-window display-buffer-in-side-window)
		   (side . right)
		   (slot . -1)
		   (window-width . 0.5)
		   (reusable-frames . nil))
		  ("*Help"
		   (display-buffer-reuse-window display-buffer-in-side-window)
		   (side . right)
		   (slot . 1)
		   (window-width . 0.5)
		   (reusable-frames . nil))))
    :bind (([f9] . ess-rdired)
		    ([f12] . company-R-args)
		    :map company-active-map
		    ("<return>" . nil)
		    ("<tab>" . company-complete-common)
		    ("<M-tab>" . company-complete-selection)))

  (use-package company-quickhelp
    :hook (ess-r-mode . company-quickhelp-mode))
#+end_src

** Language Servers

#+begin_src emacs-lisp

(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(use-package lsp-mode
  :commands (lsp lsp-deferred)
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (lsp-enable-which-key-integration t)
  (setq lsp-file-watch-threshold 10000)
  (setq lsp-log-io nil))

#+end_src

** DAP mode for debugging

#+begin_src emacs-lisp
  (use-package general)
  ;; required for the general-define-key func

  (use-package dap-mode
    :commands dap-debug
    :config
    ;; Node debugging
    (require 'dap-node)
    (dap-node-setup)
    (require 'dap-chrome)
    (dap-chrome-setup)
    (dap-ui-mode 1)
    ;; add dap-hydra to lsp mode prefixes
    (general-define-key
     :keymaps 'lsp-mode-map
     :prefix lsp-keymap-prefix
     "d" '(dap-hydra t :wk "debugger"))
    :custom
    ;; don't show all panes in debugger
    (lsp-enable-dap-auto-configure nil))

#+end_src

** Code completion with Company and Yasnippet

#+begin_src emacs-lisp

  (use-package company
    :after (lsp-mode)
    :hook (lsp-mode . company-mode)
    :bind
    (:map company-active-map
          ("<tab>" . company-complete-selection)
      ("C-n" . company-select-next-or-abort)
      ("C-p" . company-select-previous-or-abort))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

  (use-package yasnippet
    :after lsp-mode)

#+end_src

** Commenting lines

#+begin_src emacs-lisp

(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))

#+end_src

* Project management tools
** Projectile for searching and moving between projects

#+begin_src emacs-lisp

  (use-package projectile
    :diminish
    :config
    (projectile-mode)
    (setq projectile-project-search-path '("~/Projects/"))
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  ;; Counsel-projectile provides nice features like ripgrep
  (use-package counsel-projectile
    :config (counsel-projectile-mode)
    :bind (("C-c s" . counsel-projectile-rg)))

#+end_src

** Magit for easy access to git commands

#+begin_src emacs-lisp

(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Prettier for formatting js project files

#+begin_src emacs-lisp

(use-package prettier-js
  :commands (prettier-js-mode)
  :config
  (setq prettier-js-command (concat rk/usq_api_path "/node_modules/.bin/prettier"))  ; cannot find local installation otherwise
  (setq prettier-js-args
	`(,(concat "--config " (concat rk/usq_api_path "/.prettierrc"))        ; this works if I only have one prettierrc file. Need a better solution
	  "--write"))
  :hook (js2-mode ng2-ts-mode))

#+end_src

* Org mode setup
Only using org mode for documentation. Not yet for agendas etc.
** Customization

#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . rk/org-mode-setup)
    :config
    (setq org-ellipsis " ▼")
    (rk/org-font-setup)
    (setq org-babel-js-function-wrapper
          "process.stdout.write(require('util').inspect(function(){\n%s\n}(), { maxArrayLength: null, maxStringLength: null, breakLength: Infinity, compact: true }))"))


  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (require 'org-tempo)                               ; required for org>9.2

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((js . t)))

#+end_src

** Auto-tangle org file

#+begin_src emacs-lisp

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rk/org-babel-tangle-config)))

#+end_src

* Auto-save/backup files outside projects

#+begin_src emacs-lisp
    (setq backup-by-copying t
          backup-directory-alist
          '(("." . "~/.emacs.d/.saves/"))
          delete-old-versions t
          kept-new-versions 6
          kept-old-versions 2
          version-control t)
#+end_src
